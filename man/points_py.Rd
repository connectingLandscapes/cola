% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/cola_fun.R
\name{points_py}
\alias{points_py}
\title{Simulate spatial points}
\usage{
points_py(
  intif,
  outshp,
  smin,
  smax,
  npoints,
  issuit = "Yes",
  upcrs = "None",
  py = Sys.getenv("COLA_PYTHON_PATH"),
  pyscript = system.file(package = "cola", "python/create_source_points.py"),
  cml = TRUE,
  show.result = TRUE
)
}
\arguments{
\item{intif}{String. Surface resistance input raster with no spaces. Requires a projected file with square pixels. Not LonLat projection allowed}

\item{smin}{Numeric. Minimum value. The lower value of the pixels in the raster to consider to simulate the points.}

\item{smax}{Numeric. Maximum value. The upper value of the pixels in the raster to consider to simulate the points.}

\item{npoints}{Integer. Number of points. Number of points to simulate.}

\item{issuit}{String. Is it suitable? ‘Yes’ (default) or ‘No’. Indicates if the provided raster `intif` is suitability. If so, the script will likely sample higher value pixels. If ‘No’, will assume it is resistance and will sample more likely lower values}

\item{upcrs}{String. Update CRS parameter projection information in the case the input raster `intif` has no spatial projection. For GeoTiffs, this is automatically determined. For text-based files like ASCII or RSG rasters, this must be input by the user. Provide it as EPSG or ESRI string e.g. "ESRI:102028". Default value is ‘None’.}

\item{py}{String. Python location or executable. The string used in R command line to activate `cola`. The default version should point to a conda environment. Might change among computers versions}

\item{pyscript}{String. Python script location}

\item{cml}{Logical. Print the back-end command line? Default TRUE}

\item{show.result}{Logical. Print the command line result? Default TRUE}

\item{inshp}{String. Source points file path to the point layer with no spaces. Spatial point layer (any ORG driver), CSV (X, Y files), or *.xy file}

\item{outtif}{String. Output point layer file path, with no spaces. Written in ESRI Shapefile format.}
}
\value{
Path with the created shapefile
}
\description{
Creates a dispersal resistance matrix among a set of points. create_cdmat.py in the command line or cdmat_py( ) in R.
}
\examples{
library(cola)
library(terra)
hs_path <- system.file(package = 'cola', 'sampledata/sampleHS.tif')
# hs_path <- 'C:/path/to/raster.tif'
(points_path <- tempfile(fileext = '.shp'))
pts_result <- points_py(intif = hs_path, outshp = points_path, smin = 0.2, smax = 0.9, npoints = 50, issuit = 'Yes', upcrs = 'None')
plot(vect(pts_result$file))
}
\author{
Ivan Gonzalez <ig299@nau.edu>

Patrick Jantz <Patrick.Jantz@gmail.com>
}
